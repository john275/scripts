#!/bin/bash

export EYAML_CONFIG=${HOME}/eyamlkeys.yaml

function 2fa_codes {

  echo -en Gmail' \t\t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::Gmail:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en AWS' \t\t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::AWS:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en Akamai' \t\t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::Akamai:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en Secret Server' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::Secret_Server:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en Github' \t\t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::Github:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en AWS Arcanum' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::AWS_Arcanum:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en AWS MOL' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::AWS_MOL:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en AWS Sandbox' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::AWS_Sandbox:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en AWS root' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::AWS_root:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en Slack MOL' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::Slack_MOL:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en Slack Metro' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::Slack_Metro:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en AWS BidMax' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::AWS_BidMax:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en AWS Metrodev' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::AWS_Metrodev:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en Bitbucket' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::Bitbucket:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en Envato' \t\t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::Envato:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en PayPal' \t\t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::PayPal:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en MailGun' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::MailGun:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en GovGWTax' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::GovGWTax:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en GovGWPension' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::GovGWPension:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en BitWarden' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::BitWarden:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en SSO' \t\t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::SSO:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en npmjs' \t\t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::npmjs:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en 1password' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::1password:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en namecheap' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::namecheap:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en rubrick' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::rubrick:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
  echo -en john275' \t ' -\ ; oathtool -b --totp $(echo $(eyaml decrypt -s $(grep 'totp::john275:' ${HOME}/facts.eyaml | awk '{print $2}') 2>/dev/null))
}

if [[ "$1" == "-w" ]]
then

  if [[ $(date +%S) > 30 ]]
  then

    until [[ "$(date +%S)" == "00" ]]
    do
      echo -ne "\r  \r"$((60 - $(date +%S)));
    done

  else

    until [[ "$(date +%S)" == "30" ]]
    do
      echo -ne "\r  \r"$((30 - $(date +%-S)));
    done

  fi

  clear

  2fa_codes

else
  2fa_codes
fi
